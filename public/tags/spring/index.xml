<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on 好久不见</title>
    <link>http://domain.yqjdcyy.com/tags/spring/</link>
    <description>Recent content in Spring on 好久不见</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 04 Jun 2018 14:30:00 +0800</lastBuildDate>
    
	<atom:link href="http://domain.yqjdcyy.com/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring.Security</title>
      <link>http://domain.yqjdcyy.com/post/spring.security/</link>
      <pubDate>Mon, 04 Jun 2018 14:30:00 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.security/</guid>
      <description>[TOC] 前后端分离 思路 登录成功后，于 Session 添加相应属性值 接口请求时，判断过滤接口和 Session 属性值是否过期、有效，以判断是否拦截 选型 Spring.Security 展示型项目，简单区分前后</description>
    </item>
    
    <item>
      <title>Spring.Boot.Publish</title>
      <link>http://domain.yqjdcyy.com/post/spring-boot-run-on-tomcat/</link>
      <pubDate>Thu, 31 May 2018 12:10:00 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring-boot-run-on-tomcat/</guid>
      <description>[TOC] Init project.init business.finish Package packaging.war pom.xml &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt; tomcat.remove pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;!-- 移除嵌入式tomcat插件 --&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; servlet-api.add pom.xml javax.servlet-api &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; OR tomcat-servlet-api &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat-servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;8.0.36&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; runner.update 与 Application 同级 public class SpringBootStartApplication extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) { return</description>
    </item>
    
    <item>
      <title>Spring.JPA.Fetch</title>
      <link>http://domain.yqjdcyy.com/post/spring.jpa.fetch/</link>
      <pubDate>Wed, 23 May 2018 14:00:00 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.jpa.fetch/</guid>
      <description>[TOC] Setting Default Type Setting JPA 2.0 spec OneToMany Lazy ManyToMany Lazy OneToOne Eager ManyToOne Eager Hibernate * Lazy Docs Hibernate By default, Hibernate uses lazy select fetching for collections and lazy proxy fetching for single-valued associations. These defaults make sense for most associations in the majority of applications. Jpa Spec JPA Spec assumes that in general most of the applications will require the singleton relations by default be eager,</description>
    </item>
    
    <item>
      <title>Spring.@Transactional</title>
      <link>http://domain.yqjdcyy.com/post/spring.transactional/</link>
      <pubDate>Tue, 22 May 2018 16:40:00 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.transactional/</guid>
      <description>[TOC] 使用方式 将 @Transactional 注解添加至 方法 上 将 @Transactional 注解添加至 类 上 该类中所有 public 类型方法均会被配置以相同的事务属性 方法级别的事务属性 覆盖 类级别的事务属性 属性 属性</description>
    </item>
    
    <item>
      <title>Spring.Basic</title>
      <link>http://domain.yqjdcyy.com/post/spring.basic/</link>
      <pubDate>Sun, 11 Dec 2016 22:07:46 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.basic/</guid>
      <description>[TOC] AOP 介绍 Aspect-Oriented Programming 面向切面编程，对着代码横着切入 对方法的增强为 Weaving （织入） 对类的增强为 Introduction （引入） 代理 代码写死 interface public interface Greeting { void sayHello(String name); } implement public class GreetingImpl implements Greeting { @Override public void sayHello(String</description>
    </item>
    
    <item>
      <title>Spring.Cache</title>
      <link>http://domain.yqjdcyy.com/post/spring.cache/</link>
      <pubDate>Thu, 08 Dec 2016 22:07:46 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.cache/</guid>
      <description>参考链接 http://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/ 特点 通过少量的配置 annotation 注释即可使得既有代码支持缓存 支持开箱即用 Out-Of-The-Box，即不用安装和部署额外第三方组件即可使用缓</description>
    </item>
    
  </channel>
</rss>