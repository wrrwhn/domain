<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on 好久不见</title>
    <link>http://domain.yqjdcyy.com/tags/spring/</link>
    <description>Recent content in Spring on 好久不见</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Powered by [姚清居](http://www.domain.yqjdcyy.com).</copyright>
    <lastBuildDate>Wed, 23 May 2018 14:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://domain.yqjdcyy.com/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring.JPA.Fetch</title>
      <link>http://domain.yqjdcyy.com/post/spring.jpa.fetch/</link>
      <pubDate>Wed, 23 May 2018 14:00:00 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.jpa.fetch/</guid>
      <description>[TOC]
Setting Default     Type Setting     JPA 2.0 spec      OneToMany Lazy    ManyToMany Lazy    OneToOne Eager    ManyToOne Eager   Hibernate      * Lazy    Docs Hibernate  By default, Hibernate uses lazy select fetching for collections and lazy proxy fetching for single-valued associations.</description>
    </item>
    
    <item>
      <title>Spring.@Transactional</title>
      <link>http://domain.yqjdcyy.com/post/spring.transactional/</link>
      <pubDate>Tue, 22 May 2018 16:40:00 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.transactional/</guid>
      <description>[TOC]
使用方式  将 @Transactional 注解添加至 方法 上 将 @Transactional 注解添加至 类 上  该类中所有 public 类型方法均会被配置以相同的事务属性 方法级别的事务属性 覆盖 类级别的事务属性   属性 属性列表    属性名 是否必输 默认值 说明     name Yes  关联指定名称的事务管理器 可用通配符(*)来匹配多个事务管理器，如 get*, on*Event   propagation No REQUIRED 事务传播行为   isolation No DEFAULT 事务隔离等级   timeout No -1 事务超时时长，单位为秒  如果超过该时长限制而事务未完成，则自动回滚   read-only No false 事务是否只读   rollback-for No  指定能触发事务回滚的异常类型使用逗号(,)分隔，如 com.</description>
    </item>
    
    <item>
      <title>Spring.Basic</title>
      <link>http://domain.yqjdcyy.com/post/spring.basic/</link>
      <pubDate>Sun, 11 Dec 2016 22:07:46 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.basic/</guid>
      <description>[TOC]
AOP 介绍  Aspect-Oriented Programming 面向切面编程，对着代码横着切入 对方法的增强为 Weaving （织入） 对类的增强为 Introduction （引入）  代理 代码写死  interface
public interface Greeting { void sayHello(String name); }  implement
public class GreetingImpl implements Greeting { @Override public void sayHello(String name) { before(); System.out.println(&amp;quot;Hello! &amp;quot; + name); after(); } private void before() { System.out.println(&amp;quot;Before&amp;quot;); } private void after() { System.out.println(&amp;quot;After&amp;quot;); } }   静态代理  resolution 单独为 GeetingImpl 创建代理类 proxy</description>
    </item>
    
    <item>
      <title>Spring.Cache</title>
      <link>http://domain.yqjdcyy.com/post/spring.cache/</link>
      <pubDate>Thu, 08 Dec 2016 22:07:46 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/spring.cache/</guid>
      <description> 参考链接  http://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/  特点  通过少量的配置 annotation 注释即可使得既有代码支持缓存 支持开箱即用 Out-Of-The-Box，即不用安装和部署额外第三方组件即可使用缓存 支持 Spring Express Language，能使用对象的任何属性或者方法来定义缓存的 key 和 condition 支持 AspectJ，并通过其实现任何方法的缓存支持 支持自定义 key和自定义缓存管理者，具有相当的灵活性和扩展  注释标签  @Cacheable(value=&amp;ldquo;缓存名称，如a/{b, c}&amp;rdquo;[, key=&amp;ldquo;可使用SqEL获取方法参数如#userName，其中缺少按照方法所有参数进行组合&amp;rdquo;] [, condition=&amp;ldquo;可使用SqEL表达式编写，为true时进行缓存&amp;rdquo;]) @CachEvict(value=&amp;ldquo;缓存名称，如a/{b, c}&amp;rdquo; [, key=&amp;ldquo;可使用SqEL获取方法参数如#userName，其中缺少按照方法所有参数进行组合&amp;rdquo;] [, condition=&amp;ldquo;可使用SqEL表达式编写，为true时进行缓存&amp;rdquo;] [, allEntries=&amp;ldquo;true时表示清空所有缓存内容&amp;rdquo;] [, beforeInvocation=&amp;ldquo;true时表示在方法执行前清空&amp;rdquo;]) @CachePut调用方式同@Cacheable，区别于每次都会触发真实方法调用  基本原理  关键：Spring AOP 过程：  原始代码：客户端通过直接作用于类对象的方法进行直接引用 调整实现：客户端申请调用时，所拥有的为代码的引用。proxy控制实际pojo.foo()方法的入参和返回值    </description>
    </item>
    
  </channel>
</rss>