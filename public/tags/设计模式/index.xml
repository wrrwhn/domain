<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 好久不见</title>
    <link>http://domain.yqjdcyy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 好久不见</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Powered by [姚清居](http://www.domain.yqjdcyy.com).</copyright>
    <lastBuildDate>Fri, 02 Feb 2018 17:07:46 +0800</lastBuildDate>
    
	<atom:link href="http://domain.yqjdcyy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式</title>
      <link>http://domain.yqjdcyy.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 02 Feb 2018 17:07:46 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>[TOC]
设计模式 参考  《HEAD_FIRST 设计模式》 图说设计模式 design pattern 包教不包会  设计原则  找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起  系统中某部分改变不会影响其它部份  针对接口编程，而不是针对实现编程  变量声明为抽象或接口，执行时动态赋值  多用组合，少用继承 为了交互对象之间的松耦合设计而努力 类应该对扩展开放，对修改关闭  根据业务和重要性，来取舍是否  依赖倒置原则  要依赖抽象，不要依赖具体类  变量不可以持有具体类的引用  工厂  不要让类派生自具体类  派生至接口或抽象类  不要覆盖基类中已实现的方法  避免破坏基类中被继承的抽象    最少知识原则  减少对象之间的交互  好莱坞原则  别调用（打电话给）我们，我们会调用（打电话给）你 避免高、低层组件的相互依赖，导致依赖腐败 低层组件挂靠在高层组件，高层组件决定调用时机和方式  单一责任原则  一个类应该只有一个引起变化的原因 高内聚  一个模块或一个类，被设计仅支持一组相关功能时    设计模式 策略模式  定义  定义算法族；分别封装后，让它们之间相互替换 行为被封装进一组类中，并于需要时动态改变  UML     观察者模式  定义  定义对象之间的一对多依赖；当一个对象状态改变时，所有依赖者都会收到通知并自动更新  Java.</description>
    </item>
    
  </channel>
</rss>