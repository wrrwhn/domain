<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程思想 on 好久不见</title>
    <link>http://domain.yqjdcyy.com/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</link>
    <description>Recent content in 编程思想 on 好久不见</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Powered by [姚清居](http://www.domain.yqjdcyy.com).</copyright>
    <lastBuildDate>Thu, 16 Nov 2017 22:07:46 +0800</lastBuildDate>
    
	<atom:link href="http://domain.yqjdcyy.com/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>代码整洁之道.程序员的职业素养</title>
      <link>http://domain.yqjdcyy.com/post/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93.%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E7%B4%A0%E5%85%BB/</link>
      <pubDate>Thu, 16 Nov 2017 22:07:46 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93.%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E7%B4%A0%E5%85%BB/</guid>
      <description>[TOC]
代码整洁之道 - 程序员的职业素养 专业主义 为自身错误埋单 注重自测  要求自测基本完整覆盖
建议要求 设计模式
 GOF* 24 POSA 中多数模式的实战  设计原则
 了解 SOLID 原则 深刻理解组件设计原则  方法
 XP Scrum 精益 看板 瀑布 结构化分析 结构化设计  实践
 测试驱动开发 面向对象设计 结构化编程 持续集成 结对编程  工作
 UML 图 DFD 图 结构图 Petri 网络图 状态迁移图 流程图 决策图
站在 雇主/客户/产品 的角度   说“不” 拒绝说“试一试”  在上级眼里意味着你可以 另一方面，如果能完成，意味着之前有所保留，并未全然尽力
描述清楚实现的难度 认真理解说“是”的成本  说“是” 承诺用语  为自己的承诺负责 理解对方言语承诺的成分 坚守原则，避免放松代码追求  承诺无效 关键词  需要|应当  我们要把这个活干完 有人应当负责去推动这件事  希望|但愿  希望明天我能完成这件事 但愿我有时间做这件事  让我们</description>
    </item>
    
    <item>
      <title>语言类型</title>
      <link>http://domain.yqjdcyy.com/post/%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 16 Nov 2017 22:07:46 +0800</pubDate>
      
      <guid>http://domain.yqjdcyy.com/post/%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B/</guid>
      <description> [TOC]
语言类型 参考  编译型语言、解释型语言、静态类型语言、动态类型语言概念与区别 弱类型、强类型、动态类型、静态类型语言的区别是什么？  类型 编译型语言  描述  通过编译器将源代码编译成机器码 通过链接将各模块机器码和依赖库串连运行  优点  预编译时对代码进行优化 执行效率高，可脱离语言环境独立运行  缺点  编译后修改需整个模块重新编译 需根据运行环境编译  代表  C/ C++/ swift   解释型语言  描述  运行程序时逐行翻译  优点  优秀的平台兼容性（安装解释器|虚拟机）  缺点  每次运行都要解释，效率较低  代表  JavaScript/ Python   混合类型语言  描述  取编译和解释型优点而成 编译成中间码，后通过中间语言运行库运行  如 C# 中会编译成 IL代码，后保存在dll中；首次运行时由 JIT 在编译成机器码缓存在内存中，下次直接执行   代表  C#   动态语言  描述  运行时可改变代码结构  新函数、新对象、引入代码   代表  C#/ JavaScript/ Python   静态语言  描述  运行时结构不可变  代码  Java/ C/ C++   静态类型语言  描述  编写代码时，需明确变量的数量类型  代表  C/ C++/ C#/ Java   动态类型语言  描述  运行期间才进行数据类型检查  代表  JavaScript/ Python   强类型语言  描述  变量确定类型后将不可改变  代表  Java/ C#/ Python   弱类型语言  描述  变量可被赋予不同类型值  代表  JavaScript/ C   </description>
    </item>
    
  </channel>
</rss>